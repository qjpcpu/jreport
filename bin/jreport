#!/usr/bin/env ruby
require 'thor'
require 'jreport'
require 'erubis'

module JreportCommand
  
  class Generator < Thor
    
    desc 'model','model for activerecord'
    def model(name)
      puts "Generate model #{name}"
    end
    
    desc 'collector','generate collector'
    def collector(name)
      dir=File.expand_path('../../skel/collectors',__FILE__)
      code=Erubis::Eruby.new(File.read("#{dir}/template.eruby")).result(:collector=>name)
      file="./collectors/#{name}_collector.rb"
      `echo "#{code}" > "#{file}"`
    end
    
    desc 'controller','generate controller'
    def controller(name,*methods)
      methods<<'example' if methods.empty?
      dir=File.expand_path('../../skel/controllers',__FILE__)
      code=Erubis::Eruby.new(File.read("#{dir}/template.eruby")).result(:controller=>name,:methods=>methods)
      file="./controllers/#{name}_controller.rb"
      `echo "#{code}" > "#{file}"`
    end
    
    desc 'view','generate view'
    def view(name,*views)
      `mkdir "./views/#{name}"` unless File.exists?("./views/#{name}")
      views<<'example' if views.empty?
      views.map{|x| x+'_report'}.each do |fname|
        dir=File.expand_path('../../skel/views',__FILE__)
        content=Erubis::Eruby.new(File.read("#{dir}/template.eruby")).result(:report_name=>name)
        `echo "#{content}" > "./views/#{name}/#{fname}.eruby"`
        `touch "./views/#{name}/#{fname}.css"`
      end
    end
    
    desc 'scaffold NAME','generate NAME scaffold tools'
    def scaffold(name,*args)
      puts "generate scaffold #{name}"
      self.collector(name)
      self.controller(name,*args)
      self.view(name,*args)
    end
    
  end

  
  class JreportMainCmd < Thor
    desc 'new PROJECT','create new report project'
    def new(project)
      pwd=`pwd`.chomp<<"/#{project}"
      skel=File.expand_path('../../skel',__FILE__)
      `cp -r "#{skel}" "./#{project}"`
      `rm -fr "./#{project}/{collectors,controllers,views}/*"`
    end
    
    desc 'make REPORT','generate and send REPORT'
    def make(report)
      require './boot'
      assembler=Jreport::Assembler.new(report)
      assembler.make_report
    end
    
    desc "generate","generate needed components"
    subcommand "generate", Generator
  end
  
end

JreportCommand::JreportMainCmd.start(ARGV)