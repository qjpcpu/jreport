#!/usr/bin/env ruby
require 'thor'
require 'jreport'
require 'erubis'
require 'active_support/inflector'

module JreportCommand
  
  class Generator < Thor
    
    desc 'model','model for activerecord'
    def model(table,*fields)
      dir=File.expand_path('../../skel',__FILE__)
      code=Erubis::Eruby.new(File.read("#{dir}/db/migrate/template.eruby")).result(:table=>table,:fields=>fields)
      num="%03d" % ((Dir['./db/migrate/*.rb'].map{|f| File.basename(f)[0..2].to_i } << -1).max+1)
      mig_name="#{num}_create_#{table.downcase.pluralize}.rb"
      File.open("./db/migrate/#{mig_name}",'w'){|f| f.write code}
      
      refs=fields.select{|f| f.split(':')[1]=='references'}.map{|f| f.split(':')[0].downcase }
      code=Erubis::Eruby.new(File.read("#{dir}/models/template.eruby")).result(:table=>table,:refs=>refs)
      mod_name=table.downcase.singularize+'.rb'
      File.open("./models/#{mod_name}",'w'){|f| f.write code}
    end
    
    desc 'collector','generate collector'
    def collector(name)
      dir=File.expand_path('../../skel/collectors',__FILE__)
      code=Erubis::Eruby.new(File.read("#{dir}/template.eruby")).result(:collector=>name)
      file="./collectors/#{name}_collector.rb"
      File.open(file,'w'){|f| f.write code}
    end
    
    desc 'controller','generate controller'
    def controller(name,*methods)
      methods<<'example' if methods.empty?
      dir=File.expand_path('../../skel/controllers',__FILE__)
      code=Erubis::Eruby.new(File.read("#{dir}/template.eruby")).result(:controller=>name,:methods=>methods)
      file="./controllers/#{name}_controller.rb"
      File.open(file,'w'){|f| f.write code}
    end
    
    option :css
    desc 'view','generate view'
    def view(name,*views)
      dir=File.expand_path('../../skel/views',__FILE__)
      if options[:css]
	default_css=dir+'/'+options[:css].to_s+'.css'
      else
	default_css=dir+'/highlight.css'
      end
      `mkdir "./views/#{name}"` unless File.exists?("./views/#{name}")
      views<<'example' if views.empty?
      views.map{|x| x+'_report'}.each do |fname|
        dir=File.expand_path('../../skel/views',__FILE__)
        content=Erubis::Eruby.new(File.read("#{dir}/template.eruby")).result(:report_name=>name)
        File.open("./views/#{name}/#{fname}.eruby",'w'){|f| f.write content}
        `cp "#{default_css}"  "./views/#{name}/#{fname}.css"`
      end
    end
    
    desc 'scaffold NAME','generate NAME scaffold tools'
    def scaffold(name,*args)
      self.collector(name)
      self.controller(name,*args)
      self.view(name,*args)
    end
    
  end

  
  class JreportMainCmd < Thor
    desc 'new PROJECT','create new report project'
    def new(project)
      pwd=`pwd`.chomp<<"/#{project}"
      skel=File.expand_path('../../skel',__FILE__)
      `cp -r "#{skel}" "./#{project}" && rm -fr ./"#{project}"/{collectors,controllers,views,models,db/migrate}/* `
      puts "#{project} created!"
    end
    
    desc 'make REPORT','generate and send REPORT'
    def make(report)
      require './boot'
      assembler=Jreport::Assembler.new(report)
      assembler.make_report
    end
    
    desc "generate","generate needed components"
    subcommand "generate", Generator
  end
  
end

JreportCommand::JreportMainCmd.start(ARGV)
